# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railroady` gem.
# Please instead update this file by running `bin/tapioca gem railroady`.

# Diagram for Acts As State Machine
#
# source://railroady//lib/railroady/aasm_diagram.rb#6
class AasmDiagram < ::AppDiagram
  # @return [AasmDiagram] a new instance of AasmDiagram
  #
  # source://railroady//lib/railroady/aasm_diagram.rb#7
  def initialize(options = T.unsafe(nil)); end

  # Process model files
  #
  # source://railroady//lib/railroady/aasm_diagram.rb#16
  def generate; end

  # source://railroady//lib/railroady/aasm_diagram.rb#23
  def get_files(prefix = T.unsafe(nil)); end

  private

  # Load model classes
  #
  # source://railroady//lib/railroady/aasm_diagram.rb#33
  def load_classes; end

  # source://railroady//lib/railroady/aasm_diagram.rb#51
  def process_aasm_class(current_class); end

  # Process a model class
  #
  # source://railroady//lib/railroady/aasm_diagram.rb#44
  def process_class(current_class); end
end

# Root class for RailRoady diagrams
#
# source://railroady//lib/railroady/app_diagram.rb#4
class AppDiagram
  # @return [AppDiagram] a new instance of AppDiagram
  #
  # source://railroady//lib/railroady/app_diagram.rb#5
  def initialize(options = T.unsafe(nil)); end

  # get all engines
  #
  # source://railroady//lib/railroady/app_diagram.rb#40
  def engines; end

  # Print diagram
  #
  # source://railroady//lib/railroady/app_diagram.rb#13
  def print; end

  # source://railroady//lib/railroady/app_diagram.rb#35
  def process; end

  private

  # Prevents Rails application from writing to STDOUT
  #
  # source://railroady//lib/railroady/app_diagram.rb#73
  def disable_stdout; end

  # Restore STDOUT
  #
  # source://railroady//lib/railroady/app_diagram.rb#80
  def enable_stdout; end

  # Extract class name from filename
  #
  # source://railroady//lib/railroady/app_diagram.rb#91
  def extract_class_name(filename); end

  # Load Rails application's environment
  #
  # source://railroady//lib/railroady/app_diagram.rb#57
  def load_environment; end

  # Print error when loading Rails application
  #
  # source://railroady//lib/railroady/app_diagram.rb#85
  def print_error(type); end
end

# RailRoady controllers diagram
#
# source://railroady//lib/railroady/controllers_diagram.rb#4
class ControllersDiagram < ::AppDiagram
  # @return [ControllersDiagram] a new instance of ControllersDiagram
  #
  # source://railroady//lib/railroady/controllers_diagram.rb#9
  def initialize(options = T.unsafe(nil)); end

  # source://railroady//lib/railroady/controllers_diagram.rb#40
  def engine_files; end

  # source://railroady//lib/railroady/controllers_diagram.rb#44
  def extract_class_name(filename); end

  # Process controller files
  #
  # source://railroady//lib/railroady/controllers_diagram.rb#16
  def generate; end

  # source://railroady//lib/railroady/controllers_diagram.rb#33
  def get_files(prefix = T.unsafe(nil)); end

  private

  # Load controller classes
  #
  # source://railroady//lib/railroady/controllers_diagram.rb#51
  def load_classes; end

  # Proccess a controller class
  #
  # source://railroady//lib/railroady/controllers_diagram.rb#64
  def process_class(current_class); end

  # source://railroady//lib/railroady/controllers_diagram.rb#100
  def transitive_subclasses_of(klass); end
end

# as of Rails 2.3 the file is no longer application.rb but instead
# application_controller.rb
#
# source://railroady//lib/railroady/controllers_diagram.rb#7
ControllersDiagram::APP_CONTROLLER = T.let(T.unsafe(nil), String)

# source://railroady//lib/railroady/diagram_graph.rb#3
class DiagramGraph
  # @return [DiagramGraph] a new instance of DiagramGraph
  #
  # source://railroady//lib/railroady/diagram_graph.rb#6
  def initialize; end

  # source://railroady//lib/railroady/diagram_graph.rb#18
  def add_edge(edge); end

  # source://railroady//lib/railroady/diagram_graph.rb#14
  def add_node(node); end

  # Sets the attribute alphabetize
  #
  # @param value the value to set the attribute alphabetize to.
  #
  # source://railroady//lib/railroady/diagram_graph.rb#4
  def alphabetize=(_arg0); end

  # Sets the attribute diagram_type
  #
  # @param value the value to set the attribute diagram_type to.
  #
  # source://railroady//lib/railroady/diagram_graph.rb#4
  def diagram_type=(_arg0); end

  # Sets the attribute show_label
  #
  # @param value the value to set the attribute show_label to.
  #
  # source://railroady//lib/railroady/diagram_graph.rb#4
  def show_label=(_arg0); end

  # Generate DOT graph
  #
  # source://railroady//lib/railroady/diagram_graph.rb#23
  def to_dot; end

  # Generate XMI diagram (not yet implemented)
  #
  # source://railroady//lib/railroady/diagram_graph.rb#31
  def to_xmi; end

  private

  # Build a DOT graph edge
  #
  # source://railroady//lib/railroady/diagram_graph.rb#99
  def dot_edge(type, from, to, name = T.unsafe(nil)); end

  # Build DOT diagram footer
  #
  # source://railroady//lib/railroady/diagram_graph.rb#47
  def dot_footer; end

  # Build DOT diagram header
  #
  # source://railroady//lib/railroady/diagram_graph.rb#39
  def dot_header; end

  # Build diagram label
  #
  # source://railroady//lib/railroady/diagram_graph.rb#52
  def dot_label; end

  # Build a DOT graph node
  #
  # source://railroady//lib/railroady/diagram_graph.rb#67
  def dot_node(type, name, attributes = T.unsafe(nil), custom_options = T.unsafe(nil)); end

  # Quotes a class name
  #
  # source://railroady//lib/railroady/diagram_graph.rb#122
  def quote(name); end
end

# RailRoady models diagram
#
# source://railroady//lib/railroady/models_diagram.rb#4
class ModelsDiagram < ::AppDiagram
  # @return [ModelsDiagram] a new instance of ModelsDiagram
  #
  # source://railroady//lib/railroady/models_diagram.rb#5
  def initialize(options = T.unsafe(nil)); end

  # source://railroady//lib/railroady/models_diagram.rb#33
  def engine_files; end

  # source://railroady//lib/railroady/models_diagram.rb#37
  def extract_class_name(filename); end

  # Process model files
  #
  # source://railroady//lib/railroady/models_diagram.rb#13
  def generate; end

  # source://railroady//lib/railroady/models_diagram.rb#24
  def get_files(prefix = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://railroady//lib/railroady/models_diagram.rb#91
  def include_inheritance?(current_class); end

  # source://railroady//lib/railroady/models_diagram.rb#109
  def process_active_record_model(current_class); end

  # Process a model association
  #
  # source://railroady//lib/railroady/models_diagram.rb#269
  def process_association(class_name, assoc); end

  # source://railroady//lib/railroady/models_diagram.rb#98
  def process_basic_class(current_class); end

  # source://railroady//lib/railroady/models_diagram.rb#104
  def process_basic_module(current_class); end

  # Process a model class
  #
  # source://railroady//lib/railroady/models_diagram.rb#67
  def process_class(current_class); end

  # Some very basic CouchRest::Model support
  #
  # Field types note: the field's type is rendered only if it's explicitly
  # specified in a model.
  #
  # source://railroady//lib/railroady/models_diagram.rb#240
  def process_couchrest_model(current_class); end

  # source://railroady//lib/railroady/models_diagram.rb#154
  def process_datamapper_model(current_class); end

  # Process a DataMapper relationship
  #
  # source://railroady//lib/railroady/models_diagram.rb#321
  def process_datamapper_relationship(class_name, relation); end

  # source://railroady//lib/railroady/models_diagram.rb#192
  def process_mongoid_model(current_class); end
end

# RailRoady command line options parser
#
# source://railroady//lib/railroady/options_struct.rb#6
class OptionsStruct < ::OpenStruct
  # @return [OptionsStruct] a new instance of OptionsStruct
  #
  # source://railroady//lib/railroady/options_struct.rb#9
  def initialize(args = T.unsafe(nil)); end

  # source://railroady//lib/railroady/options_struct.rb#41
  def parse(args); end

  private

  # source://railroady//lib/railroady/options_struct.rb#196
  def option_error(msg); end
end

# This is the RailRoady module
# TODO: documentation
#
# source://railroady//lib/railroady/version.rb#3
module RailRoady; end

# source://railroady//lib/railroady/railtie.rb#7
class RailRoady::Railtie < ::Rails::Railtie; end

# source://railroady//lib/railroady/version.rb#4
RailRoady::VERSION = T.let(T.unsafe(nil), String)
