# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `spidr` gem.
# Please instead update this file by running `bin/tapioca gem spidr`.

# source://spidr//lib/spidr/settings/user_agent.rb#1
module Spidr
  extend ::Spidr::Settings::Proxy
  extend ::Spidr::Settings::Timeouts
  extend ::Spidr::Settings::UserAgent

  class << self
    # @see Agent.domain
    # @since 0.7.0
    #
    # source://spidr//lib/spidr/spidr.rb#55
    def domain(name, options = T.unsafe(nil), &block); end

    # @see Agent.host
    #
    # source://spidr//lib/spidr/spidr.rb#46
    def host(name, **kwargs, &block); end

    # @abstract
    #
    # source://spidr//lib/spidr/spidr.rb#69
    def robots; end

    # Enables or disables `robots.txt` globally.
    #
    # @param mode [Boolean]
    # @return [Boolean]
    # @since 0.5.0
    #
    # source://spidr//lib/spidr/spidr.rb#32
    def robots=(mode); end

    # Specifies whether `robots.txt` should be honored globally.
    #
    # @return [Boolean]
    # @since 0.5.0
    #
    # source://spidr//lib/spidr/spidr.rb#18
    def robots?; end

    # @see Agent.site
    #
    # source://spidr//lib/spidr/spidr.rb#62
    def site(url, **kwargs, &block); end

    # @see Agent.start_at
    #
    # source://spidr//lib/spidr/spidr.rb#39
    def start_at(url, **kwargs, &block); end
  end
end

# source://spidr//lib/spidr/agent/sanitizers.rb#4
class Spidr::Agent
  include ::Spidr::Settings::UserAgent

  # Creates a new Agent object.
  #
  # @option proxy
  # @option proxy
  # @option proxy
  # @option proxy
  # @param user_agent [String, nil] The `User-Agent` string to send with each requests.
  # @param referer [String, nil] The `Referer` URL to send with each request.
  # @param open_timeout [Integer, nil] Optional open connection timeout.
  # @param read_timeout [Integer, nil] Optional read timeout.
  # @param ssl_timeout [Integer, nil] Optional SSL connection timeout.
  # @param continue_timeout [Integer, nil] Optional continue timeout.
  # @param keep_alive_timeout [Integer, nil] Optional `Keep-Alive` timeout.
  # @param proxy [Spidr::Proxy, Hash, URI::HTTP, String, nil] The proxy information to use.
  # @param delay [Integer] The number of seconds to pause between each request.
  # @param limit [Integer, nil] The maximum number of pages to visit.
  # @param max_depth [Integer, nil] The maximum link depth to follow.
  # @param queue [Set, Array, nil] The initial queue of URLs to visit.
  # @param strip_fragments [Boolean] Controls whether to strip the fragment components from the URLs.
  # @param strip_query [Boolean] Controls whether to strip the query components from the URLs.
  # @param schemes [Array<String>] The list of acceptable URI schemes to visit.
  #   The `https` scheme will be ignored if `net/https` cannot be loaded.
  # @param host [String] The host-name to visit.
  # @param hosts [Array<String, Regexp, Proc>] The patterns which match the host-names to visit.
  # @param ignore_hosts [Array<String, Regexp, Proc>] The patterns which match the host-names to not visit.
  # @param ports [Array<Integer, Regexp, Proc>] The patterns which match the ports to visit.
  # @param ignore_ports [Array<Integer, Regexp, Proc>] The patterns which match the ports to not visit.
  # @param links [Array<String, Regexp, Proc>] The patterns which match the links to visit.
  # @param ignore_links [Array<String, Regexp, Proc>] The patterns which match the links to not visit.
  # @param urls [Array<String, Regexp, Proc>] The patterns which match the URLs to visit.
  # @param ignore_urls [Array<String, Regexp, Proc>] The patterns which match the URLs to not visit.
  # @param exts [Array<String, Regexp, Proc>] The patterns which match the URI path extensions to visit.
  # @param ignore_exts [Array<String, Regexp, Proc>] The patterns which match the URI path extensions to not visit.
  # @param robots [Boolean] Specifies whether `robots.txt` should be honored.
  # @param history [Set, Array, nil] The initial list of visited URLs.
  # @param host_header [String, nil] The HTTP `Host` header to use with each request.
  # @param host_headers [Hash{String,Regexp => String}] The HTTP `Host` headers to use for specific hosts.
  # @param default_headers [Hash{String => String}] Default headers to set for every request.
  # @return [Agent] a new instance of Agent
  # @yield [agent] If a block is given, it will be passed the newly created agent
  #   for further configuration.
  # @yieldparam agent [Agent] The newly created agent.
  #
  # source://spidr//lib/spidr/agent.rb#212
  def initialize(host_header: T.unsafe(nil), host_headers: T.unsafe(nil), default_headers: T.unsafe(nil), user_agent: T.unsafe(nil), referer: T.unsafe(nil), proxy: T.unsafe(nil), open_timeout: T.unsafe(nil), ssl_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), continue_timeout: T.unsafe(nil), keep_alive_timeout: T.unsafe(nil), delay: T.unsafe(nil), limit: T.unsafe(nil), max_depth: T.unsafe(nil), queue: T.unsafe(nil), history: T.unsafe(nil), strip_fragments: T.unsafe(nil), strip_query: T.unsafe(nil), schemes: T.unsafe(nil), host: T.unsafe(nil), hosts: T.unsafe(nil), ignore_hosts: T.unsafe(nil), ports: T.unsafe(nil), ignore_ports: T.unsafe(nil), links: T.unsafe(nil), ignore_links: T.unsafe(nil), urls: T.unsafe(nil), ignore_urls: T.unsafe(nil), exts: T.unsafe(nil), ignore_exts: T.unsafe(nil), robots: T.unsafe(nil)); end

  # Pass the headers from every response the agent receives to a given
  # block.
  #
  # @yield [headers] The block will be passed the headers of every response.
  # @yieldparam headers [Hash] The headers from a response.
  #
  # source://spidr//lib/spidr/agent/events.rb#68
  def all_headers; end

  # HTTP Authentication credentials
  #
  # @return [AuthStore]
  #
  # source://spidr//lib/spidr/agent.rb#42
  def authorized; end

  # HTTP Authentication credentials
  #
  # @return [AuthStore]
  #
  # source://spidr//lib/spidr/agent.rb#42
  def authorized=(_arg0); end

  # Clears the history of the agent.
  #
  # source://spidr//lib/spidr/agent.rb#456
  def clear; end

  # Continue spidering.
  #
  # @yield [page] If a block is given, it will be passed every page visited.
  # @yieldparam page [Page] The page to be visited.
  #
  # source://spidr//lib/spidr/agent/actions.rb#40
  def continue!(&block); end

  # Cached cookies
  #
  # @return [CookieJar]
  #
  # source://spidr//lib/spidr/agent.rb#79
  def cookies; end

  # HTTP Headers to use for every request
  #
  # @return [Hash{String => String}]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/agent.rb#37
  def default_headers; end

  # Delay in between fetching pages
  #
  # @return [Integer]
  #
  # source://spidr//lib/spidr/agent.rb#52
  def delay; end

  # Delay in between fetching pages
  #
  # @return [Integer]
  #
  # source://spidr//lib/spidr/agent.rb#52
  def delay=(_arg0); end

  # Enqueues a given URL for visiting, only if it passes all of the
  # agent's rules for visiting a given URL.
  #
  # @param url [URI::HTTP, String] The URL to enqueue for visiting.
  # @return [Boolean] Specifies whether the URL was enqueued, or ignored.
  #
  # source://spidr//lib/spidr/agent.rb#656
  def enqueue(url, level = T.unsafe(nil)); end

  # Pass every Atom document that the agent parses to a given block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @yield [doc] The block will be passed every Atom document parsed.
  # @yieldparam doc [Nokogiri::XML::Document] A parsed XML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#387
  def every_atom_doc; end

  # Pass every Atom feed that the agent visits to a given block.
  #
  # @yield [feed] The block will be passed every Atom feed visited.
  # @yieldparam feed [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#451
  def every_atom_page; end

  # Pass every Bad Request page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Bad Request page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#140
  def every_bad_request_page; end

  # Pass every CSS page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every CSS page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#421
  def every_css_page; end

  # Pass every HTML or XML document that the agent parses to a given
  # block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/HTML/Document.html
  # @yield [doc] The block will be passed every HTML or XML document parsed.
  # @yieldparam doc [Nokogiri::HTML::Document, Nokogiri::XML::Document] A parsed HTML or XML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#281
  def every_doc; end

  # Pass each URL that could not be requested to the given block.
  #
  # @yield [url] The block will be passed every URL that could not be requested.
  # @yieldparam url [URI::HTTP] A failed URL.
  #
  # source://spidr//lib/spidr/agent/events.rb#26
  def every_failed_url(&block); end

  # Pass every Forbidden page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Forbidden page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#170
  def every_forbidden_page; end

  # Pass every HTML document that the agent parses to a given block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/HTML/Document.html
  # @yield [doc] The block will be passed every HTML document parsed.
  # @yieldparam doc [Nokogiri::HTML::Document] A parsed HTML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#302
  def every_html_doc; end

  # Pass every HTML page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every HTML page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#231
  def every_html_page; end

  # Pass every Internal Server Error page that the agent visits to a
  # given block.
  #
  # @yield [page] The block will be passed every Internal Server Error page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#201
  def every_internal_server_error_page; end

  # Pass every JavaScript page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every JavaScript page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#406
  def every_javascript_page; end

  # Passes every origin and destination URI of each link to a given
  # block.
  #
  # @yield [origin, dest] The block will be passed every origin and destination URI of
  #   each link.
  # @yieldparam origin [URI::HTTP] The URI that a link originated from.
  # @yieldparam dest [URI::HTTP] The destination URI of a link.
  #
  # source://spidr//lib/spidr/agent/events.rb#516
  def every_link(&block); end

  # Pass every Missing page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Missing page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#185
  def every_missing_page; end

  # Pass every MS Word page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every MS Word page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#466
  def every_ms_word_page; end

  # Pass every OK page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every OK page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#95
  def every_ok_page; end

  # Pass every page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#81
  def every_page(&block); end

  # Pass every PDF page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every PDF page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#481
  def every_pdf_page; end

  # Pass every Redirect page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Redirect page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#110
  def every_redirect_page; end

  # Pass every RSS document that the agent parses to a given block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @yield [doc] The block will be passed every RSS document parsed.
  # @yieldparam doc [Nokogiri::XML::Document] A parsed XML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#366
  def every_rss_doc; end

  # Pass every RSS feed that the agent visits to a given block.
  #
  # @yield [feed] The block will be passed every RSS feed visited.
  # @yieldparam feed [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#436
  def every_rss_page; end

  # Pass every Timeout page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Timeout page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#125
  def every_timedout_page; end

  # Pass every Plain Text page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Plain Text page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#216
  def every_txt_page; end

  # Pass every Unauthorized page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every Unauthorized page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#155
  def every_unauthorized_page; end

  # Pass each URL from each page visited to the given block.
  #
  # @yield [url] The block will be passed every URL from every page visited.
  # @yieldparam url [URI::HTTP] Each URL from each page visited.
  #
  # source://spidr//lib/spidr/agent/events.rb#12
  def every_url(&block); end

  # Pass every URL that the agent visits, and matches a given pattern,
  # to a given block.
  #
  # @param pattern [Regexp, String] The pattern to match URLs with.
  # @since 0.3.2
  # @yield [url] The block will be passed every URL that matches the given pattern.
  # @yieldparam url [URI::HTTP] A matching URL.
  #
  # source://spidr//lib/spidr/agent/events.rb#46
  def every_url_like(pattern, &block); end

  # Pass every XML document that the agent parses to a given block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @yield [doc] The block will be passed every XML document parsed.
  # @yieldparam doc [Nokogiri::XML::Document] A parsed XML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#323
  def every_xml_doc; end

  # Pass every XML page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every XML page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#246
  def every_xml_page; end

  # Pass every XML Stylesheet (XSL) that the agent parses to a given
  # block.
  #
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @yield [doc] The block will be passed every XSL Stylesheet (XSL) parsed.
  # @yieldparam doc [Nokogiri::XML::Document] A parsed XML document.
  #
  # source://spidr//lib/spidr/agent/events.rb#345
  def every_xsl_doc; end

  # Pass every XML Stylesheet (XSL) page that the agent visits to a
  # given block.
  #
  # @yield [page] The block will be passed every XML Stylesheet (XSL) page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#262
  def every_xsl_page; end

  # Pass every ZIP page that the agent visits to a given block.
  #
  # @yield [page] The block will be passed every ZIP page visited.
  # @yieldparam page [Page] A visited page.
  #
  # source://spidr//lib/spidr/agent/events.rb#496
  def every_zip_page; end

  # Determines whether a given URL could not be visited.
  #
  # @param url [URI::HTTP, String] The URL to check for failures.
  # @return [Boolean] Specifies whether the given URL was unable to be visited.
  #
  # source://spidr//lib/spidr/agent.rb#605
  def failed?(url); end

  # List of unreachable URLs
  #
  # @return [Set<URI::HTTP>]
  #
  # source://spidr//lib/spidr/agent.rb#62
  def failures; end

  # Sets the list of failed URLs.
  #
  # @example
  #   agent.failures = ['http://localhost/']
  # @param new_failures [#each] The new list of failed URLs.
  # @return [Array<URI::HTTP>] The list of failed URLs.
  #
  # source://spidr//lib/spidr/agent.rb#586
  def failures=(new_failures); end

  # Requests and creates a new Page object from a given URL.
  #
  # @param url [URI::HTTP] The URL to request.
  # @return [Page, nil] The page for the response, or `nil` if the request failed.
  # @yield [page] If a block is given, it will be passed the page that represents the
  #   response.
  # @yieldparam page [Page] The page for the response.
  #
  # source://spidr//lib/spidr/agent.rb#708
  def get_page(url); end

  # History containing visited URLs
  #
  # @return [Set<URI::HTTP>]
  #
  # source://spidr//lib/spidr/agent.rb#57
  def history; end

  # Sets the history of URLs that were previously visited.
  #
  # @example
  #   agent.history = ['http://tenderlovemaking.com/2009/05/06/ann-nokogiri-130rc1-has-been-released/']
  # @param new_history [#each] A list of URLs to populate the history with.
  # @return [Set<URI::HTTP>] The history of the agent.
  #
  # source://spidr//lib/spidr/agent.rb#529
  def history=(new_history); end

  # HTTP Host `Header` to use
  #
  # @return [String]
  #
  # source://spidr//lib/spidr/agent.rb#25
  def host_header; end

  # HTTP Host `Header` to use
  #
  # @return [String]
  #
  # source://spidr//lib/spidr/agent.rb#25
  def host_header=(_arg0); end

  # HTTP `Host` Headers to use for specific hosts
  #
  # @return [Hash{String,Regexp => String}]
  #
  # source://spidr//lib/spidr/agent.rb#30
  def host_headers; end

  # Specifies the patterns that match URI path extensions to not visit.
  #
  # @return [Array<String, Regexp, Proc>] The URI path extension patterns to not visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#328
  def ignore_exts; end

  # Adds a given pattern to the {#ignore_exts}.
  #
  # @param pattern [String, Regexp] The pattern to match URI path extensions with.
  # @yield [ext] If a block is given, it will be used to filter URI path extensions.
  # @yieldparam ext [String] A URI path extension to reject or accept.
  #
  # source://spidr//lib/spidr/agent/filters.rb#344
  def ignore_exts_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match host-names to not visit.
  #
  # @return [Array<String, Regexp, Proc>] The host-name patterns to not visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#60
  def ignore_hosts; end

  # Adds a given pattern to the {#ignore_hosts}.
  #
  # @param pattern [String, Regexp] The pattern to match host-names with.
  # @yield [host] If a block is given, it will be used to filter host-names.
  # @yieldparam host [String] A host-name to reject or accept.
  #
  # source://spidr//lib/spidr/agent/filters.rb#76
  def ignore_hosts_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match links to not visit.
  #
  # @return [Array<String, Regexp, Proc>] The link patterns to not visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#192
  def ignore_links; end

  # Adds a given pattern to the {#ignore_links}.
  #
  # @param pattern [String, Regexp] The pattern to match links with.
  # @yield [link] If a block is given, it will be used to filter links.
  # @yieldparam link [String] A link to reject or accept.
  #
  # source://spidr//lib/spidr/agent/filters.rb#208
  def ignore_links_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match ports to not visit.
  #
  # @return [Array<Integer, Regexp, Proc>] The port patterns to not visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#124
  def ignore_ports; end

  # Adds a given pattern to the {#ignore_ports}.
  #
  # @param pattern [Integer, Regexp] The pattern to match ports with.
  # @yield [port] If a block is given, it will be used to filter ports.
  # @yieldparam port [Integer] A port to reject or accept.
  #
  # source://spidr//lib/spidr/agent/filters.rb#140
  def ignore_ports_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match URLs to not visit.
  #
  # @return [Array<String, Regexp, Proc>] The URL patterns to not visit.
  # @since 0.2.4
  #
  # source://spidr//lib/spidr/agent/filters.rb#262
  def ignore_urls; end

  # Adds a given pattern to the {#ignore_urls}.
  #
  # @param pattern [String, Regexp] The pattern to match URLs with.
  # @since 0.2.4
  # @yield [url] If a block is given, it will be used to filter URLs.
  # @yieldparam url [URI::HTTP, URI::HTTPS] A URL to reject or accept.
  #
  # source://spidr//lib/spidr/agent/filters.rb#280
  def ignore_urls_like(pattern = T.unsafe(nil), &block); end

  # Initializes the robots filter.
  #
  # source://spidr//lib/spidr/agent/robots.rb#11
  def initialize_robots; end

  # The visited URLs and their depth within a site
  #
  # @return [Hash{URI::HTTP => Integer}]
  #
  # source://spidr//lib/spidr/agent.rb#94
  def levels; end

  # Maximum number of pages to visit.
  #
  # @return [Integer]
  #
  # source://spidr//lib/spidr/agent.rb#84
  def limit; end

  # Maximum depth
  #
  # @return [Integer]
  #
  # source://spidr//lib/spidr/agent.rb#89
  def max_depth; end

  # Pauses the agent, causing spidering to temporarily stop.
  #
  # @raise [Paused] Indicates to the agent, that it should pause spidering.
  #
  # source://spidr//lib/spidr/agent/actions.rb#61
  def pause!; end

  # Sets the pause state of the agent.
  #
  # @param state [Boolean] The new pause state of the agent.
  #
  # source://spidr//lib/spidr/agent/actions.rb#51
  def pause=(state); end

  # Determines whether the agent is paused.
  #
  # @return [Boolean] Specifies whether the agent is paused.
  #
  # source://spidr//lib/spidr/agent/actions.rb#72
  def paused?; end

  # Queue of URLs to visit
  #
  # @return [Array<URI::HTTP>]
  #
  # source://spidr//lib/spidr/agent.rb#67
  def pending_urls; end

  # Posts supplied form data and creates a new Page object from a given URL.
  #
  # @param url [URI::HTTP] The URL to request.
  # @param post_data [String] Form option data.
  # @return [Page, nil] The page for the response, or `nil` if the request failed.
  # @since 0.2.2
  # @yield [page] If a block is given, it will be passed the page that represents the
  #   response.
  # @yieldparam page [Page] The page for the response.
  #
  # source://spidr//lib/spidr/agent.rb#743
  def post_page(url, post_data = T.unsafe(nil)); end

  # The proxy information the agent uses.
  #
  # @return [Proxy] The proxy information.
  # @see SessionCache#proxy
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/agent.rb#432
  def proxy; end

  # Sets the proxy information that the agent uses.
  #
  # @param new_proxy [Proxy, Hash, URI::HTTP, String, nil] The new proxy information.
  # @return [Proxy] The new proxy information.
  # @see SessionCache#proxy=
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/agent.rb#449
  def proxy=(new_proxy); end

  # Queue of URLs to visit
  #
  # @return [Array<URI::HTTP>]
  #
  # source://spidr//lib/spidr/agent.rb#67
  def queue; end

  # Sets the queue of URLs to visit.
  #
  # @example
  #   agent.queue = ['http://www.vimeo.com/', 'http://www.reddit.com/']
  # @param new_queue [#each] The new list of URLs to visit.
  # @return [Array<URI::HTTP>] The list of URLs to visit.
  #
  # source://spidr//lib/spidr/agent.rb#623
  def queue=(new_queue); end

  # Determines whether a given URL has been enqueued.
  #
  # @param url [URI::HTTP] The URL to search for in the queue.
  # @return [Boolean] Specifies whether the given URL has been queued for visiting.
  #
  # source://spidr//lib/spidr/agent.rb#642
  def queued?(url); end

  # Referer to use
  #
  # @return [String]
  #
  # source://spidr//lib/spidr/agent.rb#47
  def referer; end

  # Referer to use
  #
  # @return [String]
  #
  # source://spidr//lib/spidr/agent.rb#47
  def referer=(_arg0); end

  # Determines whether a URL is allowed by the robot policy.
  #
  # @param url [URI::HTTP, String] The URL to check.
  # @return [Boolean] Specifies whether a URL is allowed by the robot policy.
  #
  # source://spidr//lib/spidr/agent/robots.rb#28
  def robot_allowed?(url); end

  # Start spidering until the queue becomes empty or the agent is
  # paused.
  #
  # @yield [page] If a block is given, it will be passed every page visited.
  # @yieldparam page [Page] A page which has been visited.
  #
  # source://spidr//lib/spidr/agent.rb#490
  def run(&block); end

  # Determines if the agent is running.
  #
  # @return [Boolean] Specifies whether the agent is running or stopped.
  #
  # source://spidr//lib/spidr/agent.rb#513
  def running?; end

  # Sanitizes a URL based on filtering options.
  #
  # @param url [URI::HTTP, URI::HTTPS, String] The URL to be sanitized
  # @return [URI::HTTP, URI::HTTPS] The new sanitized URL.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#23
  def sanitize_url(url); end

  # List of acceptable URL schemes to follow
  #
  # source://spidr//lib/spidr/agent/filters.rb#7
  def schemes; end

  # Sets the list of acceptable URL schemes to visit.
  #
  # @example
  #   agent.schemes = ['http']
  # @param new_schemes [Array] The new schemes to visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#18
  def schemes=(new_schemes); end

  # The session cache
  #
  # @return [SessionCache]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/agent.rb#74
  def sessions; end

  # Causes the agent to skip the link being enqueued.
  #
  # @raise [SkipLink] Indicates to the agent, that the current link should be skipped,
  #   and not enqueued or visited.
  #
  # source://spidr//lib/spidr/agent/actions.rb#83
  def skip_link!; end

  # Causes the agent to skip the page being visited.
  #
  # @raise [SkipPage] Indicates to the agent, that the current page should be skipped.
  #
  # source://spidr//lib/spidr/agent/actions.rb#93
  def skip_page!; end

  # Start spidering at a given URL.
  #
  # @param url [URI::HTTP, String] The URL to start spidering at.
  # @yield [page] If a block is given, it will be passed every page visited.
  # @yieldparam page [Page] A page which has been visited.
  #
  # source://spidr//lib/spidr/agent.rb#475
  def start_at(url, &block); end

  # Specifies whether the Agent will strip URI fragments
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#7
  def strip_fragments; end

  # Specifies whether the Agent will strip URI fragments
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#7
  def strip_fragments=(_arg0); end

  # Specifies whether the Agent will strip URI queries
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#10
  def strip_query; end

  # Specifies whether the Agent will strip URI queries
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#10
  def strip_query=(_arg0); end

  # Converts the agent into a Hash.
  #
  # @return [Hash] The agent represented as a Hash containing the `history` and
  #   the `queue` of the agent.
  #
  # source://spidr//lib/spidr/agent.rb#817
  def to_hash; end

  # @see #every_url_like
  #
  # source://spidr//lib/spidr/agent/events.rb#54
  def urls_like(pattern, &block); end

  # Specifies the patterns that match the URI path extensions to visit.
  #
  # @return [Array<String, Regexp, Proc>] The URI path extensions patterns to visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#296
  def visit_exts; end

  # Adds a given pattern to the {#visit_exts}.
  #
  # @param pattern [String, Regexp] The pattern to match URI path extensions with.
  # @yield [ext] If a block is given, it will be used to filter URI path extensions.
  # @yieldparam ext [String] A URI path extension to accept or reject.
  #
  # source://spidr//lib/spidr/agent/filters.rb#312
  def visit_exts_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match host-names to visit.
  #
  # @return [Array<String, Regexp, Proc>] The host-name patterns to visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#28
  def visit_hosts; end

  # Adds a given pattern to the {#visit_hosts}.
  #
  # @param pattern [String, Regexp] The pattern to match host-names with.
  # @yield [host] If a block is given, it will be used to filter host-names.
  # @yieldparam host [String] A host-name to accept or reject.
  #
  # source://spidr//lib/spidr/agent/filters.rb#44
  def visit_hosts_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match the links to visit.
  #
  # @return [Array<String, Regexp, Proc>] The link patterns to visit.
  # @since 0.2.4
  #
  # source://spidr//lib/spidr/agent/filters.rb#158
  def visit_links; end

  # Adds a given pattern to the {#visit_links}
  #
  # @param pattern [String, Regexp] The pattern to match link with.
  # @since 0.2.4
  # @yield [link] If a block is given, it will be used to filter links.
  # @yieldparam link [String] A link to accept or reject.
  #
  # source://spidr//lib/spidr/agent/filters.rb#176
  def visit_links_like(pattern = T.unsafe(nil), &block); end

  # Visits a given URL, and enqueues the links recovered from the URL
  # to be visited later.
  #
  # @param url [URI::HTTP, String] The URL to visit.
  # @return [Page, nil] The page that was visited. If `nil` is returned, either the request
  #   for the page failed, or the page was skipped.
  # @yield [page] If a block is given, it will be passed the page which was visited.
  # @yieldparam page [Page] The page which was visited.
  #
  # source://spidr//lib/spidr/agent.rb#774
  def visit_page(url); end

  # Specifies the patterns that match the ports to visit.
  #
  # @return [Array<Integer, Regexp, Proc>] The port patterns to visit.
  #
  # source://spidr//lib/spidr/agent/filters.rb#92
  def visit_ports; end

  # Adds a given pattern to the {#visit_ports}.
  #
  # @param pattern [Integer, Regexp] The pattern to match ports with.
  # @yield [port] If a block is given, it will be used to filter ports.
  # @yieldparam port [Integer] A port to accept or reject.
  #
  # source://spidr//lib/spidr/agent/filters.rb#108
  def visit_ports_like(pattern = T.unsafe(nil), &block); end

  # Specifies the patterns that match the URLs to visit.
  #
  # @return [Array<String, Regexp, Proc>] The link patterns to visit.
  # @since 0.2.4
  #
  # source://spidr//lib/spidr/agent/filters.rb#226
  def visit_urls; end

  # Adds a given pattern to the {#visit_urls}
  #
  # @param pattern [String, Regexp] The pattern to match URLs with.
  # @since 0.2.4
  # @yield [url] If a block is given, it will be used to filter URLs.
  # @yieldparam url [URI::HTTP, URI::HTTPS] A URL to accept or reject.
  #
  # source://spidr//lib/spidr/agent/filters.rb#244
  def visit_urls_like(pattern = T.unsafe(nil), &block); end

  # Determines whether a URL was visited or not.
  #
  # @param url [URI::HTTP, String] The URL to search for.
  # @return [Boolean] Specifies whether a URL was visited.
  #
  # source://spidr//lib/spidr/agent.rb#570
  def visited?(url); end

  # Specifies all hosts that were visited.
  #
  # @return [Array<String>] The hosts which have been visited.
  #
  # source://spidr//lib/spidr/agent.rb#557
  def visited_hosts; end

  # Specifies the links which have been visited.
  #
  # @return [Array<String>] The links which have been visited.
  #
  # source://spidr//lib/spidr/agent.rb#547
  def visited_links; end

  # History containing visited URLs
  #
  # @return [Set<URI::HTTP>]
  #
  # source://spidr//lib/spidr/agent.rb#57
  def visited_urls; end

  protected

  # Dequeues a URL that will later be visited.
  #
  # @return [URI::HTTP] The URL that was at the front of the queue.
  #
  # source://spidr//lib/spidr/agent.rb#920
  def dequeue; end

  # Adds a given URL to the failures list.
  #
  # @param url [URI::HTTP] The URL to add to the failures list.
  #
  # source://spidr//lib/spidr/agent.rb#961
  def failed(url); end

  # source://spidr//lib/spidr/agent/actions.rb#99
  def initialize_actions; end

  # source://spidr//lib/spidr/agent/events.rb#523
  def initialize_events; end

  # Initializes filtering rules.
  #
  # @param ignore_exts [Array<String, Regexp, Proc>] The patterns which match the URI path extensions to not visit.
  # @param host [String] The host-name to visit.
  # @param hosts [Array<String, Regexp, Proc>] The patterns which match the host-names to visit.
  # @param ignore_hosts [Array<String, Regexp, Proc>] The patterns which match the host-names to not visit.
  # @param ports [Array<Integer, Regexp, Proc>] The patterns which match the ports to visit.
  # @param ignore_ports [Array<Integer, Regexp, Proc>] The patterns which match the ports to not visit.
  # @param links [Array<String, Regexp, Proc>] The patterns which match the links to visit.
  # @param ignore_links [Array<String, Regexp, Proc>] The patterns which match the links to not visit.
  # @param urls [Array<String, Regexp, Proc>] The patterns which match the URLs to visit.
  # @param ignore_urls [Array<String, Regexp, Proc>] The patterns which match the URLs to not visit.
  # @param exts [Array<String, Regexp, Proc>] The patterns which match the URI path extensions to visit.
  # @param schemes [Array<String>] The list of acceptable URI schemes to visit.
  #   The `https` scheme will be ignored if `net/https` cannot be loaded.
  #
  # source://spidr//lib/spidr/agent/filters.rb#396
  def initialize_filters(schemes: T.unsafe(nil), host: T.unsafe(nil), hosts: T.unsafe(nil), ignore_hosts: T.unsafe(nil), ports: T.unsafe(nil), ignore_ports: T.unsafe(nil), links: T.unsafe(nil), ignore_links: T.unsafe(nil), urls: T.unsafe(nil), ignore_urls: T.unsafe(nil), exts: T.unsafe(nil), ignore_exts: T.unsafe(nil)); end

  # Initializes the Sanitizer rules.
  #
  # @param strip_fragments [Boolean] Specifies whether or not to strip the fragment component from URLs.
  # @param strip_query [Boolean] Specifies whether or not to strip the query component from URLs.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/agent/sanitizers.rb#45
  def initialize_sanitizers(strip_fragments: T.unsafe(nil), strip_query: T.unsafe(nil)); end

  # Determines if the maximum limit has been reached.
  #
  # @return [Boolean]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/agent.rb#931
  def limit_reached?; end

  # Normalizes the request path and grabs a session to handle page
  # get and post requests.
  #
  # @param url [URI::HTTP] The URL to request.
  # @since 0.2.2
  # @yield [request] A block whose purpose is to make a page request.
  # @yieldparam session [Net::HTTP] An HTTP session object.
  # @yieldparam path [String] Normalized URL string.
  # @yieldparam headers [Hash] A Hash of request header options.
  #
  # source://spidr//lib/spidr/agent.rb#883
  def prepare_request(url, &block); end

  # Prepares request headers for the given URL.
  #
  # @param url [URI::HTTP] The URL to prepare the request headers for.
  # @return [Hash{String => String}] The prepared headers.
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/agent.rb#834
  def prepare_request_headers(url); end

  # Determines if a given URL should be visited.
  #
  # @param url [URI::HTTP] The URL in question.
  # @return [Boolean] Specifies whether the given URL should be visited.
  #
  # source://spidr//lib/spidr/agent.rb#944
  def visit?(url); end

  # Determines if a given URI path extension should be visited.
  #
  # @param path [String] The path that contains the extension.
  # @return [Boolean] Specifies whether the given URI path extension should be visited.
  #
  # source://spidr//lib/spidr/agent/filters.rb#523
  def visit_ext?(path); end

  # Determines if a given host-name should be visited.
  #
  # @param host [String] The host-name.
  # @return [Boolean] Specifies whether the given host-name should be visited.
  #
  # source://spidr//lib/spidr/agent/filters.rb#469
  def visit_host?(host); end

  # Determines if a given link should be visited.
  #
  # @param link [String] The link.
  # @return [Boolean] Specifies whether the given link should be visited.
  #
  # source://spidr//lib/spidr/agent/filters.rb#495
  def visit_link?(link); end

  # Determines if a given port should be visited.
  #
  # @param port [Integer] The port number.
  # @return [Boolean] Specifies whether the given port should be visited.
  #
  # source://spidr//lib/spidr/agent/filters.rb#482
  def visit_port?(port); end

  # Determines if a given URI scheme should be visited.
  #
  # @param scheme [String] The URI scheme.
  # @return [Boolean] Specifies whether the given scheme should be visited.
  #
  # source://spidr//lib/spidr/agent/filters.rb#452
  def visit_scheme?(scheme); end

  # Determines if a given URL should be visited.
  #
  # @param link [URI::HTTP, URI::HTTPS] The URL.
  # @return [Boolean] Specifies whether the given URL should be visited.
  # @since 0.2.4
  #
  # source://spidr//lib/spidr/agent/filters.rb#510
  def visit_url?(link); end

  class << self
    # Determines the default URI schemes to follow.
    #
    # @return [Array<String>] The default URI schemes to follow.
    # @since 0.6.2
    #
    # source://spidr//lib/spidr/agent/filters.rb#427
    def default_schemes; end

    # Creates a new agent and spiders the entire domain.
    #
    # @param name [String] The top-level domain to spider.
    # @param kwargs [Hash{Symbol => Object}] Additional keyword arguments. See {Agent#initialize}.
    # @return [Agent] The created agent object.
    # @see #initialize
    # @since 0.7.0
    # @yield [agent] If a block is given, it will be passed the newly created agent
    #   before it begins spidering.
    # @yieldparam agent [Agent] The newly created agent.
    #
    # source://spidr//lib/spidr/agent.rb#416
    def domain(name, **kwargs, &block); end

    # Creates a new agent and spiders the given host.
    #
    # @param name [String] The host-name to spider.
    # @param kwargs [Hash{Symbol => Object}] Additional keyword arguments. See {Agent#initialize}.
    # @return [Agent] The created agent object.
    # @see #initialize
    # @yield [agent] If a block is given, it will be passed the newly created agent
    #   before it begins spidering.
    # @yieldparam agent [Agent] The newly created agent.
    #
    # source://spidr//lib/spidr/agent.rb#387
    def host(name, **kwargs, &block); end

    # Creates a new agent and spiders the web-site located at the given URL.
    #
    # @param url [URI::HTTP, String] The web-site to spider.
    # @param kwargs [Hash{Symbol => Object}] Additional keyword arguments. See {Agent#initialize}.
    # @return [Agent] The created agent object.
    # @see #initialize
    # @yield [agent] If a block is given, it will be passed the newly created agent
    #   before it begins spidering.
    # @yieldparam agent [Agent] The newly created agent.
    #
    # source://spidr//lib/spidr/agent.rb#358
    def site(url, **kwargs, &block); end

    # Creates a new agent and begin spidering at the given URL.
    #
    # @param url [URI::HTTP, String] The URL to start spidering at.
    # @param kwargs [Hash{Symbol => Object}] Additional keyword arguments. See {Agent#initialize}.
    # @return [Agent] The created agent object.
    # @see #initialize
    # @see #start_at
    # @yield [agent] If a block is given, it will be passed the newly created agent
    #   before it begins spidering.
    # @yieldparam agent [Agent] The newly created agent.
    #
    # source://spidr//lib/spidr/agent.rb#331
    def start_at(url, **kwargs, &block); end
  end
end

# source://spidr//lib/spidr/agent/actions.rb#3
module Spidr::Agent::Actions; end

# The base {Actions} exception class.
#
# source://spidr//lib/spidr/agent/actions.rb#7
class Spidr::Agent::Actions::Action < ::RuntimeError; end

# An {Actions} exception class used to pause a running {Agent}.
#
# source://spidr//lib/spidr/agent/actions.rb#13
class Spidr::Agent::Actions::Paused < ::Spidr::Agent::Actions::Action; end

# An {Actions} exception class which causes a running {Agent} to
# skip a link.
#
# source://spidr//lib/spidr/agent/actions.rb#20
class Spidr::Agent::Actions::SkipLink < ::Spidr::Agent::Actions::Action; end

# An {Actions} exception class which causes a running {Agent} to
# skip a {Page}, and all links within that page.
#
# source://spidr//lib/spidr/agent/actions.rb#27
class Spidr::Agent::Actions::SkipPage < ::Spidr::Agent::Actions::Action; end

# Represents HTTP Authentication credentials for a website.
#
# source://spidr//lib/spidr/auth_credential.rb#5
class Spidr::AuthCredential
  # Creates a new credential used for authentication.
  #
  # @param username [String] The username for the credential.
  # @param password [String] The password for the credential.
  # @return [AuthCredential] a new instance of AuthCredential
  #
  # source://spidr//lib/spidr/auth_credential.rb#22
  def initialize(username, password); end

  # The password
  #
  # source://spidr//lib/spidr/auth_credential.rb#11
  def password; end

  # The username
  #
  # source://spidr//lib/spidr/auth_credential.rb#8
  def username; end
end

# Stores {AuthCredential} objects organized by a website's scheme,
# host-name and sub-directory.
#
# source://spidr//lib/spidr/auth_store.rb#12
class Spidr::AuthStore
  # Creates a new auth store.
  #
  # @return [AuthStore] a new instance of AuthStore
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#19
  def initialize; end

  # Given a URL, return the most specific matching auth credential.
  #
  # @param url [URI] A fully qualified url including optional path.
  # @return [AuthCredential, nil] Closest matching {AuthCredential} values for the URL,
  #   or `nil` if nothing matches.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#35
  def [](url); end

  # Add an auth credential to the store for supplied base URL.
  #
  # @param url [URI] A URL pattern to associate with a set of auth credentials.
  # @param auth [AuthCredential] The auth credential for this URL pattern.
  # @return [AuthCredential] The newly added auth credential.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#71
  def []=(url, auth); end

  # Convenience method to add username and password credentials
  # for a named URL.
  #
  # @param url [URI] The base URL that requires authorization.
  # @param username [String] The username required to access the URL.
  # @param password [String] The password required to access the URL.
  # @return [AuthCredential] The newly added auth credential.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#103
  def add(url, username, password); end

  # Clear the contents of the auth store.
  #
  # @return [AuthStore] The cleared auth store.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#133
  def clear!; end

  # Returns the base64 encoded authorization string for the URL
  # or `nil` if no authorization exists.
  #
  # @param url [URI] The URL.
  # @return [String, nil] The base64 encoded authorizatio string or `nil`.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#119
  def for_url(url); end

  # Inspects the auth store.
  #
  # @return [String] The inspected version of the auth store.
  #
  # source://spidr//lib/spidr/auth_store.rb#160
  def inspect; end

  # Size of the current auth store (number of URL paths stored).
  #
  # @return [Integer] The size of the auth store.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/auth_store.rb#146
  def size; end
end

# Stores HTTP Cookies organized by host-name.
#
# source://spidr//lib/spidr/cookie_jar.rb#9
class Spidr::CookieJar
  include ::Enumerable

  # Creates a new Cookie Jar object.
  #
  # @return [CookieJar] a new instance of CookieJar
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#18
  def initialize; end

  # Return all relevant cookies in a single string for the
  # named host or domain (in browser request format).
  #
  # @param host [String] Host or domain name for cookies.
  # @return [String, nil] The cookie values or `nil` if the host does not have a cookie in the
  #   jar.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#58
  def [](host); end

  # Add a cookie to the jar for a particular domain.
  #
  # @param host [String] Host or domain name to associate with the cookie.
  # @param cookies [Hash{String => String}] Cookie params.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#73
  def []=(host, cookies); end

  # Clear out the jar, removing all stored cookies.
  #
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#174
  def clear!; end

  # Returns raw cookie value pairs for a given host. Includes cookies set on
  # parent domain(s).
  #
  # @param host [String] The name of the host.
  # @return [Hash{String => String}] Cookie params.
  # @since 0.2.7
  #
  # source://spidr//lib/spidr/cookie_jar.rb#148
  def cookies_for_host(host); end

  # Enumerates over the host-name and cookie value pairs in the
  # cookie jar.
  #
  # @since 0.2.2
  # @yield [host, cookie] If a block is given, it will be passed each host-name and cookie
  #   value pair.
  # @yieldparam host [String] The host-name that the cookie is bound to.
  # @yieldparam cookie [String] The cookie value.
  #
  # source://spidr//lib/spidr/cookie_jar.rb#41
  def each(&block); end

  # Returns the pre-encoded Cookie for a given host.
  #
  # @param host [String] The name of the host.
  # @return [String] The encoded Cookie.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#121
  def for_host(host); end

  # Retrieve cookies for a domain from a page response header.
  #
  # @param page [Page] The response page from which to extract cookie data.
  # @return [Boolean] Specifies whether cookies were added from the page.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#99
  def from_page(page); end

  # Inspects the cookie jar.
  #
  # @return [String] The inspected version of the cookie jar.
  #
  # source://spidr//lib/spidr/cookie_jar.rb#197
  def inspect; end

  # Size of the current cookie jar store.
  #
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/cookie_jar.rb#187
  def size; end
end

# Represents a requested page from a website.
#
# source://spidr//lib/spidr/page.rb#5
class Spidr::Page
  include ::Enumerable

  # Creates a new Page object.
  #
  # @param url [URI::HTTP] The URL of the page.
  # @param response [Net::HTTPResponse] The response from the request for the page.
  # @return [Page] a new instance of Page
  #
  # source://spidr//lib/spidr/page.rb#25
  def initialize(url, response); end

  # Searches for the first occurrence an XPath or CSS Path expression.
  #
  # @example
  #   page.at('//title')
  # @return [Nokogiri::HTML::Node, Nokogiri::XML::Node, nil] The first matched node. Returns `nil` if no nodes could be matched,
  #   or if the page is not a HTML or XML document.
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Node.html#M000251
  #
  # source://spidr//lib/spidr/page.rb#108
  def %(*arguments); end

  # Searches the document for XPath or CSS Path paths.
  #
  # @example
  #   page.search('//a[@href]')
  # @param paths [Array<String>] CSS or XPath expressions to search the document with.
  # @return [Array] The matched nodes from the document.
  #   Returns an empty Array if no nodes were matched, or if the page
  #   is not an HTML or XML document.
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Node.html#M000239
  #
  # source://spidr//lib/spidr/page.rb#88
  def /(*paths); end

  # Searches for the first occurrence an XPath or CSS Path expression.
  #
  # @example
  #   page.at('//title')
  # @return [Nokogiri::HTML::Node, Nokogiri::XML::Node, nil] The first matched node. Returns `nil` if no nodes could be matched,
  #   or if the page is not a HTML or XML document.
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Node.html#M000251
  #
  # source://spidr//lib/spidr/page.rb#108
  def at(*arguments); end

  # Determines if the page is an Atom feed.
  #
  # @return [Boolean] Specifies whether the page is an Atom feed.
  #
  # source://spidr//lib/spidr/page/content_types.rb#191
  def atom?; end

  # Determines if the response code is `400`.
  #
  # @return [Boolean] Specifies whether the response code is `400`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#31
  def bad_request?; end

  # The body of the response.
  #
  # @return [String] The body of the response.
  #
  # source://spidr//lib/spidr/page.rb#38
  def body; end

  # The response code from the page.
  #
  # @return [Integer] Response code from the page.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#9
  def code; end

  # The charset included in the Content-Type.
  #
  # @return [String, nil] The charset of the content.
  # @since 0.4.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#33
  def content_charset; end

  # The Content-Type of the page.
  #
  # @return [String] The Content-Type of the page.
  #
  # source://spidr//lib/spidr/page/content_types.rb#9
  def content_type; end

  # The content types of the page.
  #
  # @return [Array<String>] The values within the Content-Type header.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/page/content_types.rb#21
  def content_types; end

  # The raw Cookie String sent along with the page.
  #
  # @return [String] The raw Cookie from the response.
  # @since 0.2.7
  #
  # source://spidr//lib/spidr/page/cookies.rb#16
  def cookie; end

  # The Cookie key -> value pairs returned with the response.
  #
  # @return [Hash{String => String}] The cookie keys and values.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/page/cookies.rb#42
  def cookie_params; end

  # The Cookie values sent along with the page.
  #
  # @return [Array<String>] The Cookies from the response.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/page/cookies.rb#30
  def cookies; end

  # Determines if the page is a CSS stylesheet.
  #
  # @return [Boolean] Specifies whether the page is a CSS stylesheet.
  #
  # source://spidr//lib/spidr/page/content_types.rb#170
  def css?; end

  # Determines if the page is a Directory Listing.
  #
  # @return [Boolean] Specifies whether the page is a Directory Listing.
  # @since 0.3.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#106
  def directory?; end

  # Returns a parsed document object for HTML, XML, RSS and Atom pages.
  #
  # @return [Nokogiri::HTML::Document, Nokogiri::XML::Document, nil] The document that represents HTML or XML pages.
  #   Returns `nil` if the page is neither HTML, XML, RSS, Atom or if
  #   the page could not be parsed properly.
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Document.html
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/HTML/Document.html
  #
  # source://spidr//lib/spidr/page.rb#55
  def doc; end

  # Enumerates over every absolute URL in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.3.0
  # @yield [url] The given block will be passed every URL in the page.
  # @yieldparam url [URI::HTTP] An absolute URL in the page.
  #
  # source://spidr//lib/spidr/page/html.rb#233
  def each; end

  # Enumerates over every link in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.3.0
  # @yield [link] The given block will be passed every non-empty link in the page.
  # @yieldparam link [String] A link in the page.
  #
  # source://spidr//lib/spidr/page/html.rb#180
  def each_link(&block); end

  # Enumerates over every `mailto:` link in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.5.0
  # @yield [link] The given block will be passed every `mailto:` link from the page.
  # @yieldparam link [String] A `mailto:` link from the page.
  #
  # source://spidr//lib/spidr/page/html.rb#144
  def each_mailto; end

  # Enumerates over the meta-redirect links in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.3.0
  # @yield [link] If a block is given, it will be passed every meta-redirect link
  #   from the page.
  # @yieldparam link [String] A meta-redirect link from the page.
  #
  # source://spidr//lib/spidr/page/html.rb#35
  def each_meta_redirect; end

  # Enumerates over every HTTP or meta-redirect link in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.3.0
  # @yield [link] The given block will be passed every redirection link from the page.
  # @yieldparam link [String] A HTTP or meta-redirect link from the page.
  #
  # source://spidr//lib/spidr/page/html.rb#105
  def each_redirect(&block); end

  # Enumerates over every absolute URL in the page.
  #
  # @return [Enumerator] If no block is given, an enumerator object will be returned.
  # @since 0.3.0
  # @yield [url] The given block will be passed every URL in the page.
  # @yieldparam url [URI::HTTP] An absolute URL in the page.
  #
  # source://spidr//lib/spidr/page/html.rb#233
  def each_url; end

  # Determines if the response code is `403`.
  #
  # @return [Boolean] Specifies whether the response code is `403`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#53
  def forbidden?; end

  # Determines if the page is a GIF image.
  #
  # @return [Boolean] Specifies whether the page is a GIF image.
  # @since 0.7.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#245
  def gif?; end

  # Determines if the response code is `500`.
  #
  # @return [Boolean] Specifies whether the response code is `500`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#89
  def had_internal_server_error?; end

  # Headers returned with the body
  #
  # source://spidr//lib/spidr/page.rb#14
  def headers; end

  # Determines if the page is HTML document.
  #
  # @return [Boolean] Specifies whether the page is HTML document.
  #
  # source://spidr//lib/spidr/page/content_types.rb#116
  def html?; end

  # Determines if the page is a ICO image.
  #
  # @return [Boolean] Specifies whether the page is a ICO image.
  # @since 0.7.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#269
  def ico?; end

  # Determines if the page is a ICO image.
  #
  # @return [Boolean] Specifies whether the page is a ICO image.
  # @since 0.7.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#269
  def icon?; end

  # Determines if any of the content-types of the page include a given
  # type.
  #
  # @example Match the Content-Type
  #   page.is_content_type?('application/json')
  # @example Match the sub-type of the Content-Type
  #   page.is_content_type?('json')
  # @param type [String] The content-type to test for.
  # @return [Boolean] Specifies whether the page includes the given content-type.
  # @since 0.4.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#67
  def is_content_type?(type); end

  # Determines if the response code is `403`.
  #
  # @return [Boolean] Specifies whether the response code is `403`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#53
  def is_forbidden?; end

  # Determines if the response code is `404`.
  #
  # @return [Boolean] Specifies whether the response code is `404`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#65
  def is_missing?; end

  # Determines if the response code is `200`.
  #
  # @return [Boolean] Specifies whether the response code is `200`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#19
  def is_ok?; end

  # Determines if the response code is `300`, `301`, `302`, `303`
  # or `307`. Also checks for "soft" redirects added at the page
  # level by a meta refresh tag.
  #
  # @return [Boolean] Specifies whether the response code is a HTTP Redirect code.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#101
  def is_redirect?; end

  # Determines if the response code is `408`.
  #
  # @return [Boolean] Specifies whether the response code is `408`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#77
  def is_timedout?; end

  # Determines if the response code is `401`.
  #
  # @return [Boolean] Specifies whether the response code is `401`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#41
  def is_unauthorized?; end

  # Determines if the page is JavaScript.
  #
  # @return [Boolean] Specifies whether the page is JavaScript.
  #
  # source://spidr//lib/spidr/page/content_types.rb#147
  def javascript?; end

  # Determines if the page is a JPEG image.
  #
  # @return [Boolean] Specifies whether the page is a JPEG image.
  # @since 0.7.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#257
  def jpeg?; end

  # Determines if the page is JSON.
  #
  # @return [Boolean] Specifies whether the page is JSON.
  # @since 0.3.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#160
  def json?; end

  # The links from within the page.
  #
  # @return [Array<String>] All links within the HTML page, `frame`/`iframe` source URLs and any
  #   links in the `Location` header.
  #
  # source://spidr//lib/spidr/page/html.rb#215
  def links; end

  # `mailto:` links in the page.
  #
  # @return [Array<String>] The `mailto:` links found within the page.
  # @since 0.5.0
  #
  # source://spidr//lib/spidr/page/html.rb#162
  def mailtos; end

  # The meta-redirect links of the page.
  #
  # @deprecated Deprecated in 0.3.0 and will be removed in 0.4.0.
  #   Use {#meta_redirects} instead.
  # @return [Array<String>] All meta-redirect links in the page.
  #
  # source://spidr//lib/spidr/page/html.rb#84
  def meta_redirect; end

  # Returns a boolean indicating whether or not page-level meta
  # redirects are present in this page.
  #
  # @return [Boolean] Specifies whether the page includes page-level redirects.
  #
  # source://spidr//lib/spidr/page/html.rb#58
  def meta_redirect?; end

  # The meta-redirect links of the page.
  #
  # @return [Array<String>] All meta-redirect links in the page.
  # @since 0.3.0
  #
  # source://spidr//lib/spidr/page/html.rb#70
  def meta_redirects; end

  # Determines if the response code is `404`.
  #
  # @return [Boolean] Specifies whether the response code is `404`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#65
  def missing?; end

  # Determines if the page is a MS Word document.
  #
  # @return [Boolean] Specifies whether the page is a MS Word document.
  #
  # source://spidr//lib/spidr/page/content_types.rb#201
  def ms_word?; end

  # Determines if the response code is `200`.
  #
  # @return [Boolean] Specifies whether the response code is `200`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#19
  def ok?; end

  # Determines if the page is a PDF document.
  #
  # @return [Boolean] Specifies whether the page is a PDF document.
  #
  # source://spidr//lib/spidr/page/content_types.rb#211
  def pdf?; end

  # Determines if the page is plain-text.
  #
  # @return [Boolean] Specifies whether the page is plain-text.
  #
  # source://spidr//lib/spidr/page/content_types.rb#92
  def plain_text?; end

  # Determines if the page is a PNG image.
  #
  # @return [Boolean] Specifies whether the page is a PNG image.
  # @since 0.7.0
  #
  # source://spidr//lib/spidr/page/content_types.rb#233
  def png?; end

  # The raw Cookie String sent along with the page.
  #
  # @return [String] The raw Cookie from the response.
  # @since 0.2.7
  #
  # source://spidr//lib/spidr/page/cookies.rb#16
  def raw_cookie; end

  # Determines if the response code is `300`, `301`, `302`, `303`
  # or `307`. Also checks for "soft" redirects added at the page
  # level by a meta refresh tag.
  #
  # @return [Boolean] Specifies whether the response code is a HTTP Redirect code.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#101
  def redirect?; end

  # URLs that this document redirects to.
  #
  # @return [Array<String>] The links that this page redirects to (usually found in a
  #   location header or by way of a page-level meta redirect).
  #
  # source://spidr//lib/spidr/page/html.rb#126
  def redirects_to; end

  # HTTP Response
  #
  # source://spidr//lib/spidr/page.rb#11
  def response; end

  # Determines if the page is a RSS feed.
  #
  # @return [Boolean] Specifies whether the page is a RSS feed.
  #
  # source://spidr//lib/spidr/page/content_types.rb#180
  def rss?; end

  # Searches the document for XPath or CSS Path paths.
  #
  # @example
  #   page.search('//a[@href]')
  # @param paths [Array<String>] CSS or XPath expressions to search the document with.
  # @return [Array] The matched nodes from the document.
  #   Returns an empty Array if no nodes were matched, or if the page
  #   is not an HTML or XML document.
  # @see http://nokogiri.rubyforge.org/nokogiri/Nokogiri/XML/Node.html#M000239
  #
  # source://spidr//lib/spidr/page.rb#88
  def search(*paths); end

  # Determines if the response code is `408`.
  #
  # @return [Boolean] Specifies whether the response code is `408`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#77
  def timedout?; end

  # The title of the HTML page.
  #
  # @return [String] The inner-text of the title element of the page.
  #
  # source://spidr//lib/spidr/page/html.rb#14
  def title; end

  # Normalizes and expands a given link into a proper URI.
  #
  # @param link [String] The link to normalize and expand.
  # @return [URI::HTTP] The normalized URI.
  #
  # source://spidr//lib/spidr/page/html.rb#264
  def to_absolute(link); end

  # The body of the response.
  #
  # @return [String] The body of the response.
  #
  # source://spidr//lib/spidr/page.rb#38
  def to_s; end

  # Determines if the page is plain-text.
  #
  # @return [Boolean] Specifies whether the page is plain-text.
  #
  # source://spidr//lib/spidr/page/content_types.rb#92
  def txt?; end

  # Determines if the response code is `401`.
  #
  # @return [Boolean] Specifies whether the response code is `401`.
  #
  # source://spidr//lib/spidr/page/status_codes.rb#41
  def unauthorized?; end

  # URL of the page
  #
  # source://spidr//lib/spidr/page.rb#8
  def url; end

  # Absolute URIs from within the page.
  #
  # @return [Array<URI::HTTP>] The links from within the page, converted to absolute URIs.
  #
  # source://spidr//lib/spidr/page/html.rb#251
  def urls; end

  # Determines if the page is XML document.
  #
  # @return [Boolean] Specifies whether the page is XML document.
  #
  # source://spidr//lib/spidr/page/content_types.rb#126
  def xml?; end

  # Determines if the page is XML Stylesheet (XSL).
  #
  # @return [Boolean] Specifies whether the page is XML Stylesheet (XSL).
  #
  # source://spidr//lib/spidr/page/content_types.rb#137
  def xsl?; end

  # Determines if the page is a ZIP archive.
  #
  # @return [Boolean] Specifies whether the page is a ZIP archive.
  #
  # source://spidr//lib/spidr/page/content_types.rb#221
  def zip?; end

  protected

  # Provides transparent access to the values in {#headers}.
  #
  # @param name [Symbol] The name of the missing method.
  # @param arguments [Array] Additional arguments for the missing method.
  # @raise [NoMethodError] The missing method did not map to a header in {#headers}.
  # @return [String] The missing method mapped to a header in {#headers}.
  #
  # source://spidr//lib/spidr/page.rb#134
  def method_missing(name, *arguments, &block); end
end

# Reserved names used within Cookie strings
#
# source://spidr//lib/spidr/page/cookies.rb#6
Spidr::Page::RESERVED_COOKIE_NAMES = T.let(T.unsafe(nil), Regexp)

# @since 0.6.0
#
# source://spidr//lib/spidr/proxy.rb#5
class Spidr::Proxy < ::Struct
  # Initializes the proxy.
  #
  # @param host [String] The host the proxy is running on.
  # @param port [Integer] The port the proxy is running on.
  # @param user [String] The user to authenticate as with the proxy.
  # @param password [String] The password to authenticate with.
  # @return [Proxy] a new instance of Proxy
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/proxy.rb#25
  def initialize(host: T.unsafe(nil), port: T.unsafe(nil), user: T.unsafe(nil), password: T.unsafe(nil)); end

  # Determines if the proxy is not set.
  #
  # @return [Boolean]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/proxy.rb#43
  def disabled?; end

  # Determines if the proxy settings are set.
  #
  # @return [Boolean]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/proxy.rb#34
  def enabled?; end
end

# Default port to use.
#
# @since 0.6.0
#
# source://spidr//lib/spidr/proxy.rb#8
Spidr::Proxy::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# The {Rules} class represents collections of acceptance and rejection
# rules, which are used to filter data.
#
# source://spidr//lib/spidr/rules.rb#6
class Spidr::Rules
  # Creates a new Rules object.
  #
  # @param accept [Array<String, Regexp, Proc>, nil] The patterns to accept data with.
  # @param reject [Array<String, Regexp, Proc>, nil] The patterns to reject data with.
  # @return [Rules] a new instance of Rules
  #
  # source://spidr//lib/spidr/rules.rb#23
  def initialize(accept: T.unsafe(nil), reject: T.unsafe(nil)); end

  # Accept rules
  #
  # source://spidr//lib/spidr/rules.rb#9
  def accept; end

  # Determines whether the data should be accepted or rejected.
  #
  # @return [Boolean] Specifies whether the given data was accepted, using the rules
  #   acceptance patterns.
  #
  # source://spidr//lib/spidr/rules.rb#38
  def accept?(data); end

  # Reject rules
  #
  # source://spidr//lib/spidr/rules.rb#12
  def reject; end

  # Determines whether the data should be rejected or accepted.
  #
  # @return [Boolean] Specifies whether the given data was rejected, using the rules
  #   rejection patterns.
  #
  # source://spidr//lib/spidr/rules.rb#53
  def reject?(data); end

  protected

  # Tests the given data against a given pattern.
  #
  # @return [Boolean] Specifies whether the given data matched the pattern.
  #
  # source://spidr//lib/spidr/rules.rb#65
  def test_data(data, rule); end
end

# Stores active HTTP Sessions organized by scheme, host-name and port.
#
# source://spidr//lib/spidr/session_cache.rb#12
class Spidr::SessionCache
  include ::Spidr::Settings::Proxy
  include ::Spidr::Settings::Timeouts

  # Creates a new session cache.
  #
  # @param proxy [Hash] Proxy options.
  # @param open_timeout [Integer] Optional open connection timeout.
  # @param ssl_timeout [Integer] Optional SSL connection timeout.
  # @param read_timeout [Integer] Optional read timeout.
  # @param continue_timeout [Integer] Optional `Continue` timeout.
  # @param keep_alive_timeout [Integer] Optional `Keep-Alive` timeout.
  # @return [SessionCache] a new instance of SessionCache
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/session_cache.rb#40
  def initialize(proxy: T.unsafe(nil), open_timeout: T.unsafe(nil), ssl_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), continue_timeout: T.unsafe(nil), keep_alive_timeout: T.unsafe(nil)); end

  # Provides an active HTTP session for a given URL.
  #
  # @param url [URI::HTTP, String] The URL which will be requested later.
  # @return [Net::HTTP] The active HTTP session object.
  #
  # source://spidr//lib/spidr/session_cache.rb#87
  def [](url); end

  # Determines if there is an active HTTP session for a given URL.
  #
  # @param url [URI::HTTP, String] The URL that represents a session.
  # @return [Boolean] Specifies whether there is an active HTTP session.
  # @since 0.2.3
  #
  # source://spidr//lib/spidr/session_cache.rb#68
  def active?(url); end

  # Clears the session cache.
  #
  # @return [SessionCache] The cleared session cache.
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/session_cache.rb#155
  def clear; end

  # Destroys an HTTP session for the given scheme, host and port.
  #
  # @param url [URI::HTTP, String] The URL of the requested session.
  # @return [nil]
  # @since 0.2.2
  #
  # source://spidr//lib/spidr/session_cache.rb#130
  def kill!(url); end

  private

  # Creates a session key based on the URL.
  #
  # @param url [URI::HTTP] The given URL.
  # @return [Array] The session key containing the scheme, host and port.
  #
  # source://spidr//lib/spidr/session_cache.rb#178
  def key_for(url); end
end

# source://spidr//lib/spidr/settings/user_agent.rb#2
module Spidr::Settings; end

# Methods for configuring a proxy.
#
# @since 0.6.0
#
# source://spidr//lib/spidr/settings/proxy.rb#12
module Spidr::Settings::Proxy
  # Disables the proxy settings used by all newly created Agent objects.
  #
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/proxy.rb#69
  def disable_proxy!; end

  # Proxy information used by all newly created Agent objects by default.
  #
  # @return [Spidr::Proxy] The Spidr proxy information.
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/proxy.rb#19
  def proxy; end

  # Sets the proxy information used by Agent objects.
  #
  # @option new_proxy
  # @option new_proxy
  # @option new_proxy
  # @option new_proxy
  # @param new_proxy [Spidr::Proxy, Hash, URI::HTTP, String, nil] The new proxy information.
  # @return [Spidr::Proxy] The new proxy information.
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/proxy.rb#44
  def proxy=(new_proxy); end
end

# @since 0.6.0
#
# source://spidr//lib/spidr/settings/timeouts.rb#6
module Spidr::Settings::Timeouts
  # `Continue` timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#25
  def continue_timeout; end

  # `Continue` timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#25
  def continue_timeout=(_arg0); end

  # `Keep-Alive` timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#30
  def keep_alive_timeout; end

  # `Keep-Alive` timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#30
  def keep_alive_timeout=(_arg0); end

  # Open timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#15
  def open_timeout; end

  # Open timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#15
  def open_timeout=(_arg0); end

  # Read timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#10
  def read_timeout; end

  # Read timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#10
  def read_timeout=(_arg0); end

  # SSL timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#20
  def ssl_timeout; end

  # SSL timeout.
  #
  # @return [Integer, nil]
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/timeouts.rb#20
  def ssl_timeout=(_arg0); end
end

# @since 0.6.0
#
# source://spidr//lib/spidr/settings/user_agent.rb#6
module Spidr::Settings::UserAgent
  # The User-Agent string used by all Agent objects by default.
  #
  # @return [String] The Spidr User-Agent string.
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/user_agent.rb#11
  def user_agent; end

  # The User-Agent string used by all Agent objects by default.
  #
  # @return [String] The Spidr User-Agent string.
  # @since 0.6.0
  #
  # source://spidr//lib/spidr/settings/user_agent.rb#11
  def user_agent=(_arg0); end
end

# Spidr version
#
# source://spidr//lib/spidr/version.rb#3
Spidr::VERSION = T.let(T.unsafe(nil), String)

# source://spidr//lib/spidr/extensions/uri.rb#4
module URI
  class << self
    # Expands a URI decoded path, into a proper absolute path.
    #
    # @example
    #   URI.expand_path('./path')
    #   # => "path"
    # @example
    #   URI.expand_path('test/../path')
    #   # => "path"
    # @example
    #   URI.exand_path('/test/path/')
    #   # => "/test/path/"
    # @example
    #   URI.expand_path('/test/../path')
    #   # => "/path"
    # @param path [String] The path from a URI.
    # @return [String] The expanded path.
    #
    # source://spidr//lib/spidr/extensions/uri.rb#30
    def expand_path(path); end
  end
end
